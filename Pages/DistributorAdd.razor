@using Project_v2.Data
@using System.Collections.Generic
@inject StoreService  storeService

@if (currentProducts == null) {
    <div>Loading...</div>
} else {
    
    <div class="row" >
        <div class="col-6">
            <DistributorInventory distributor=@distributor currentProducts=@currentProducts onChanged="onChanged"/>
        </div>
        <div class="col-6">
            <h3>Add New Product</h3>
            <div><label>Name:</label><input type='text' @bind-value=@newProduct.name /> </div>
            <div><label>Cost:</label><input type='text' @bind-value=@newProduct.cost /> </div>
            <div><label>Inventory Count:</label><input type='text' @bind-value=@newProduct.inventoryCount /> </div>
            <div><label>Minimum Age To Sell:</label><input type='text' @bind-value=@newProduct.minAgeRestriction /> </div>
            <button @onclick=@SaveNewProduct>Save New Product</button>
        </div>
    </div>
}
@code {
    [Parameter]
    public StoreService.Distributor distributor { get; set; }

    [Parameter]
    public List<StoreService.Product> currentProducts {get;set;}

    [Parameter]
    public EventCallback onChanged { get; set; }

    StoreService.Product newProduct = new StoreService.Product();

    //List<StoreService.Product> currentProducts = null;
    protected override async Task OnInitializedAsync() {
        currentProducts = await storeService.GetDistributorsProducts(distributor.id);
    }

    async Task SaveNewProduct() {
        //Save Product here
        var i = 0;
        newProduct.id = Guid.NewGuid();
        newProduct.distributorID = distributor.id;
        storeService.SaveNewProduct(newProduct);
        currentProducts = await storeService.GetDistributorsProducts(distributor.id);
        await onChanged.InvokeAsync(null);
    }

}
