@using Project_v2.Data
@using System.Collections.Generic
@inject StoreService  storeService

    <div><h3>Cart:</h3></div>
@if (cartLines == null) {
    <div></div>
} else {
    <table width="100%">
        <tr>
            <th width="40%">Name</th>
            <th width="20%">Cost</th>
            <th width="20%">Quanity</th>
            <th width="20%">Remove</th>
        </tr>
        @foreach (Tuple<StoreService.Product,int> p in cartLines) {
        <tr>
            <td>@p.Item1.name</td>
            <td>@p.Item1.cost.ToString("c")</td>
            <td>@p.Item2</td>
            <td><button @onclick=@(e=>RemoveProduct(p.Item1,customer.id)) >Delete Product</button></td>
        </tr>
        }
        @foreach (Tuple<StoreService.Product, int> p in cartLines) { totalCost = totalCost + (p.Item1.cost * p.Item2)}
        <tr>
            <td>Total:</td>
            <td></td>
            <td>@totalCost</td>
            <td></td>
        </tr>
    </table>
}
@code {
    [Parameter]
    public StoreService.Customer customer { get; set; }

    [Parameter]
    public List<Tuple<StoreService.Product, int>> cartLines {get;set;}

    [Parameter]
    public EventCallback onChanged { get; set; }

    double totalCost = 0.0;

    StoreService.Product newProduct = new StoreService.Product();

    //List<StoreService.Product> currentProducts = null;
    protected override async Task OnInitializedAsync() {
        cartLines = await storeService.GetCart(customer);
    }

    async Task RemoveProduct(StoreService.Product p, Guid custID) {
        //storeService.RemoveProductFromCart(p,custID);
        await onChanged.InvokeAsync(null);
    }
}
