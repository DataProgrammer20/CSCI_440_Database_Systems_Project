@using Project_v2.Data
@inject StoreService  StoreService

<div><h3>Cart:</h3></div>



@if (CartLines == null) {
    <div></div>
} else {
<table width="100%">
    <tr>
        <th width="40%">Name</th>
        <th width="20%">Quanity</th>
        <th width="20%">Cost</th>
        <th width="20%">Remove</th>
    </tr>
    @foreach (Tuple<StoreService.Product, int> p in CartLines) {
        <tr>
            <td>@p.Item1.Name</td>
            <td>@p.Item2</td>
            <td>@p.Item1.Cost.ToString("c")</td>
            <td><button @onclick=@(e => RemoveProduct(p.Item1, Customer))>Delete Product</button></td>
        </tr>

    }
    @foreach (Tuple<StoreService.Product, int> p in CartLines) { totalCost = totalCost + (p.Item1.Cost * p.Item2); }
    <tr>
        <td>Total:</td>
        <td></td>
        <td>@totalCost.ToString("c")</td>
        <td></td>
    </tr>
    @{totalCost = 0.0;}
</table>
}

@code
{
    [Parameter]
    public StoreService.Customer Customer { get; set; }

    [Parameter]
    public List<Tuple<StoreService.Product, int>> CartLines { get; set; }

    [Parameter]
    public EventCallback OnChanged { get; set; }

    double totalCost = 0.0;

    protected override async Task OnInitializedAsync() {
        CartLines = await StoreService.GetCart(Customer);
    }
    async Task RemoveProduct(StoreService.Product p, StoreService.Customer customer) {
        StoreService.RemoveProductFromCart(p,customer);
        await OnChanged.InvokeAsync(null);
     }

}